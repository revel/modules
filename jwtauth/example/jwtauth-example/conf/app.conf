################################################################################
# Revel configuration file
# See:
#   http://revel.github.io/manual/appconf.html
#   for more detailed documentation.
################################################################################

# This sets the `AppName` variable which can be used in your code as
#   `if revel.AppName {...}`
app.name = jwtauth-example

# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
app.secret = 5HX7DyJHNI3PJDEt6EbUx9sZ5kbSSJUhs8rm1S592yoYAnHb28gmucIcDDRrsYQa


# The IP address on which to listen.
http.addr =

# The port on which to listen.
http.port = 9000

# Whether to use SSL or not.
http.ssl = false

# Path to an X509 certificate file, if using SSL.
#http.sslcert =

# Path to an X509 certificate key, if using SSL.
#http.sslkey =


# For any cookies set by Revel (Session,Flash,Error) these properties will set
# the fields of:
# http://golang.org/pkg/net/http/#Cookie
#
# The HttpOnly attribute is supported by most modern browsers. On a supported
# browser, an HttpOnly session cookie will be used only when transmitting HTTP
# (or HTTPS) requests, thus restricting access from other, non-HTTP APIs (such
# as JavaScript). This restriction mitigates, but does not eliminate the threat
# of session cookie theft via cross-site scripting (XSS). This feature applies
# only to session-management cookies, and not other browser cookies.
cookie.httponly = false

# Each cookie set by Revel is prefixed with this string.
cookie.prefix = REVEL

# A secure cookie has the secure attribute enabled and is only used via HTTPS,
# ensuring that the cookie is always encrypted when transmitting from client to
# server. This makes the cookie less likely to be exposed to cookie theft via
# eavesdropping.
cookie.secure = false

# Limit cookie access to a given domain
#cookie.domain =

# Define when your session cookie expires. Possible values:
# "720h"
#   A time duration (http://golang.org/pkg/time/#ParseDuration) after which
#   the cookie expires and the session is invalid.
# "session"
#   Sets a session cookie which invalidates the session when the user close
#   the browser.
session.expires = 720h


# The date format used by Revel. Possible formats defined by the Go `time`
# package (http://golang.org/pkg/time/#Parse)
format.date     = 01/02/2006
format.datetime = 01/02/2006 15:04


# Determines whether the template rendering should use chunked encoding.
# Chunked encoding can decrease the time to first byte on the client side by
# sending data before the entire template has been fully rendered.
results.chunked = false


# Prefixes for each log message line
log.trace.prefix = "TRACE "
log.info.prefix  = "INFO  "
log.warn.prefix  = "WARN  "
log.error.prefix = "ERROR "


# The default language of this application.
i18n.default_language = en


# Module to serve static content such as CSS, JavaScript and Media files
# Allows Routes like this:
#  `Static.ServeModule("modulename","public")`
module.static=github.com/revel/modules/static

# Enabling JWT Auth module 
module.jwtauth = github.com/revel/modules/jwtauth



################################################################################
# Section: dev
# This section is evaluated when running Revel in dev mode. Like so:
#   `revel run path/to/myapp`
[dev]
# This sets `DevMode` variable to `true` which can be used in your code as
#   `if revel.DevMode {...}`
#   or in your templates with
#   `<no value>`
mode.dev = true

#
# JWT Auth Module configuration
#
# default is REVEL-JWT-AUTH
auth.jwt.realm.name = "JWT-AUTH"

# use appropriate values (string, URL), default is REVEL-JWT-AUTH
auth.jwt.issuer = "JWT AUTH"

# In minutes, default is 60 minutes
auth.jwt.expiration = 30

# Signing Method
# options are - HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512
auth.jwt.sign.method = "RS512"

# RSA key files
# applicable to RS256, RS384, RS512 signing method and comment out others
auth.jwt.key.private = "${GOPATH}/src/github.com/revel/modules/jwtauth/example/jwtauth-example/conf/rsa_private.pem"
auth.jwt.key.public = "${GOPATH}/src/github.com/revel/modules/jwtauth/example/jwtauth-example/conf/rsa_public.pem"

# Uncomment below two lines for ES256, ES384, ES512 signing method and comment out others
# since we  will be use ECDSA
#auth.jwt.key.private = "${GOPATH}/src/github.com/revel/modules/jwtauth/example/jwtauth-example/conf/ec_private.pem"
#auth.jwt.key.public = "${GOPATH}/src/github.com/revel/modules/jwtauth/example/jwtauth-example/conf/ec_public.pem"

# HMAC signing Secret value
# Uncomment below line for HS256, HS384, HS512 signing method and comment out others
#auth.jwt.key.hmac = "1A39B778C0CE40B1B32585CF846F61B1"

# Valid regexp allowed for path
auth.jwt.anonymous = "/, /token, /register, /(forgot|reset)-password"

# Pretty print JSON/XML when calling RenderJson/RenderXml
results.pretty = true


# Automatically watches your applicaton files and recompiles on-demand
watch = true


# If you set watcher.mode = "eager", the server starts to recompile
# your application every time your application's files change.
watcher.mode = "normal"


# Module to run code tests in the browser
# See:
#   http://revel.github.io/manual/testing.html
module.testrunner = github.com/revel/modules/testrunner


# Where to log the various Revel logs
log.trace.output = off
log.info.output  = stderr
log.warn.output  = stderr
log.error.output = stderr



################################################################################
# Section: prod
# This section is evaluated when running Revel in production mode. Like so:
#   `revel run path/to/myapp prod`
# See:
#  [dev] section for documentation of the various settings
[prod]
mode.dev = false


results.pretty = false


watch = false


module.testrunner =


log.trace.output = off
log.info.output  = off
log.warn.output  = %(app.name)s.log
log.error.output = %(app.name)s.log
